#+TITLE: Papers from 2018
#+DESCRIPTION:
#+KEYWORDS:
#+STARTUP:  content
#+OPTIONS: toc:1 H:4 num:1

- [[wiki:index][Index]]
  
* [[https://eprint.iacr.org/2018/570][Fast Large-Scale Honest-Majority MPC for Malicious Adversaries (Koji Chida, Daniel Genkin, Koki Hamada, Dai Ikarashi, Ryo Kikuchi, Yehuda Lindell and Ariel Nof)]]
Presented at CRYPTO 2018 ([[https://youtu.be/AbX9Qm_OTe0][Video here]])

** Short Description
A compiler from secure-up-to-additive-attacks protocols to active security.

** Abstract
Protocols for secure multiparty computation enable a set of parties to
compute a function of their inputs without revealing anything but the
output. The security properties of the protocol must be pre- served in
the presence of adversarial behavior. The two classic adversary models
considered are semi-honest (where the adversary follows the protocol
specification but tries to learn more than allowed by examining the
protocol transcript) and malicious (where the adversary may follow any
arbitrary attack strategy). Protocols for semi-honest adversaries are
often far more efficient, but in many cases the security guarantees
are not strong enough.

In this paper, we present new protocols for securely computing any
functionality represented by an arithmetic circuit. We utilize a new
method for verifying that the adversary does not cheat, that yields a
cost of just twice that of semi-honest protocols in some settings. Our
protocols are information-theoretically secure in the presence of a
malicious adversaries, assuming an honest majority. We present
protocol variants for small and large fields, and show how to
efficiently instantiate them based on replicated secret sharing and
Shamir sharing. As with previous works in this area aiming to achieve
high efficiency, our protocol is secure with abort and does not
achieve fairness, meaning that the adversary may receive output while
the honest parties do not.

We implemented our protocol and ran experiments for different
numbers of parties, different network configurations and different
circuit depths.  Our protocol significantly outperforms the previous
best for this setting (Lindell and Nof, CCS 2017); for a large number
of parties, our implementation runs almost an order of magnitude
faster than theirs.

** My Summary
  
Some passively secure protocols in the honest majority setting are not so insecure as they seem: The only place in which an adversary may cheat is at the multiplication gates, and furthermore, the only thing it can do there is adding an error /independent of the inputs/ to the result of the multiplication.
This observation was made initially in [[[chida-1][1]]] and generalized in [[[chida-2][2]]].
Although the authors in [[[chida-1][1]]] already propose a compilation process from passive to active security, this work is the first concrete instantiation of the ideas presented in [[[chida-1][1]]] (TODO get the EXACT differences).

The authors propose a method to prevent additive attacks which essentially consists of secret-sharing each wire value $x$ as $([x],[r\cdot x])$ (where $[\cdot]$ is the underlying secret-sharing scheme used for the passively secure protocol), where $r\in\mathbb F$ is uniformly random, global and unknown to the adversary.
In addition, parties also have shares of $r$.

Let us denote the representation above by $\langle x\rangle$.
Addition gates can be processed easily.
To process the multiplication of to inputs $\langle x\rangle$ and $\langle y\rangle$, it suffices to use the passively secure multiplication protocol to compute $[z] = [x]\cdot [y]$ and $[r\cdot z] = [r\cdot x]\cdot [y]$ (notice that $[r\cdot y]$ is not used).

Recall that the adversary may introduce an additive error after each multiplication gate.
To ensure that the multiplication is correct, the parties open $r$ and multiply $[r\cdot y] = r\cdot [z], and check that this yields the same result as the one obtained above (by multiplying $[r\cdot x]$ and $[y]$).
Of course, opening $r$ can only be done if it is not going to be used anymore, i.e. right before the output gates (as a side note, one may try to keep $r$ shared and use the insecure multiplication protocol to get $[r\cdot z] = [r]\cdot [x]$, but I'm pretty sure this is not secure as the adversary can introduce an error that matches the previous one and thus it will remain undetected) .
Thus, one has to perform this check only at the end of the execution of the circuit.
Furthermore, instead of checking each intermediate multiplication individually, one can take a random linear combination of them and check this instead.

A final note is that this final check boils down to checking that a shared value is equal to zero.
However, this cannot be done by simply opening this value since, in the case that it is not equal to zero, this reveals sensitive information to the adversary.

Regarding numbers, the authors outperform what at that time was the best previous protocol for the same setting [[[chida-3][3]]].
The gap is significant for a large number of parties, with this protocol being around 10 times faster than the one from [[[chida-3][3]]].

*** References

1) <<chida-1>>D. Genkin, Y. Ishai, M. Prabhakaran, A. Sahai and E. Tromer. Circuits Resilient to Additive Attacks with Applications to Secure Computation. In STOC 2014.
2) <<chida-2>>D. Genkin, Y. Ishai and A. Polychroniadou. Efficient Multi-party Computation: From Passive to Active Security via Secure SIMD Circuits. In CRYPTO 2015.
3) <<chida-3>>Y. Lindell and A. Nof. A Framework for Constructing Fast MPC over Arithmetic Circuits with Malicious Adversaries and an Honest-Majority. In ACM CCS, 2017.
   
   
      
      
      
