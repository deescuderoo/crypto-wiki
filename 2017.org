#+TITLE: Papers from 2017
#+DESCRIPTION:
#+KEYWORDS:
#+STARTUP:  content
#+OPTIONS: toc:1 H:4 num:1

- [[wiki:index][Index]]
  
* [[https://www.ieee-security.org/TC/SP2017/papers/96.pdf][Optimized Honest-Majority MPC for Malicious Adversaries - Breaking the 1 Billion-Gate Per Second Barrier (Toshinori Araki, Assi Barak, Jun Furukawa, Tamar Lichter, Yehuda Lindell, Ariel Nof, Kazuma Ohara, Adi Watzman and Or Weinstein)]]
Presented at S&P 2017.

** Short Description
Very efficient actively secure boolean computation in the honest majority setting.

** Abstract
Secure multiparty computation enables a set of parties to
securely carry out a joint computation of their private inputs
without revealing anything but the output. In the past few
years, the efficiency of secure computation protocols has
increased in leaps and bounds. However, when considering the
case of security in the presence of malicious adversaries (who
may arbitrarily deviate from the protocol specification), we
are still very far from achieving high efficiency. In this
paper, we consider the specific case of three parties and an
honest majority. We provide general techniques for improving
efficiency of cut-and-choose protocols on multiplication
triples and utilize them to significantly improve the recently
published protocol of Furukawa et al. (ePrint 2016/944). We
reduce the bandwidth of their protocol down from 10 bits per
AND gate to 7 bits per AND gate, and show how to improve some
computationally expensive parts of their protocol. Most
notably, we design cache-efficient shuffling techniques for
implementing cut-and-choose without randomly permuting large
arrays (which is very slow due to continual cache misses). We
provide a combinatorial analysis of our techniques, bounding
the cheating probability of the adversary.  Our implementation
achieves a rate of approximately 1.15 billion AND gates per
second on a cluster of three 20-core machines with a 10Gbps
network. Thus, we can securely compute 212,000 AES encryptions
per second (which is hundreds of times faster than previous
work for this setting). Our results demonstrate that
high-throughput secure computation for malicious adversaries
is possible.

** My Summary

I did not read this paper in detail.
However, I did attend a lecture where Yehuda Lindell, one of the authors, explained this work.
This paper has a clear practical orientation, more focused on the engineering of MPC than on the theory or development of new protocols, although it involves many interesting theoretical questions that are motivated on practical issues.
This work is essentially a highly optimized implementation of the protocol from [[[araki-1][1]]], in the boolean setting.
The most interesting contribution, however, is not the implementation itself, but the techniques they use in order make the protocol more "implementation-friendly".
More precisely, the authors identify that a direct (optimized) implementation of the protocol [[[araki-1][1]]] yields good numbers (500 million AND gates per second), but that there are many steps of the protocol that can be improved in order to boost efficiency.
One of the points that really drew my attention is the following:

The permutation needed for the cut-and-choose approach may be very large and it is difficult to manage in memory. Permuting in smaller chunks is better since one can avoid more cache misses.
Thus the authors propose a method to shuffle arrays that is more cache-friendly, and although it provides different guarantees that a totally random shuffling, they show (via some combinatorial analysis) that this still suffices for the cut-and-choose technique.
As a side note, I believe this is a very nice example of a problem that one would not think about unless one has an "engineering-oriented" mindset.
This may show that the argument "the rest is just engineering" that many people use constantly may not be so correct after all.

By applying this and several other modifications to the protocol in [[[araki-1][1]]], the authors manage to double the throughput of the initial (already optimized) implementation, reaching 1,152,751,967 AND gates per second.
Amazing.

*** References

1) <<araki-1>>J. Furukawa, Y. Lindell, A. Nof and O. Weinstein. High-Throughput Secure Three-Party Computation for Malicious Adversaries and an Honest Majority. In EUROCRYPT 2017. TODO check if this is 2016 or 2017
   
* [[https://eprint.iacr.org/2017/816][A Framework for Constructing Fast MPC over Arithmetic Circuits with Malicious Adversaries and an Honest-Majority (Yehuda Lindell and Ariel Nof)]]   
Presented at CCS 2017.

** Short Description
Actively Secure Three-party MPC with cheap multiplications.

** Abstract
Protocols for secure multiparty computation enable a set of parties to compute a function of their inputs without revealing anything but the output. The security properties of the protocol must be preserved in the presence of adversarial behavior. The two classic adversary models considered are /semi-honest/ (where the adversary follows the protocol specification but tries to learn more than allowed by examining the protocol transcript) and \emph{malicious} (where the adversary may follow any arbitrary attack strategy). Protocols for semi-honest adversaries are often far more efficient, but in many cases the security guarantees are not strong enough.

In this paper, we present a new efficient method for ``compiling'' a large class of protocols that are secure in the presence of semi-honest adversaries into protocols that are secure in the presence of malicious adversaries. Our method assumes an honest majority (i.e., that $t\lt n/2$ where $t$ is the number of corrupted parties and $n$ is the number of parties overall), and is applicable to many semi-honest protocols based on secret-sharing. In order to achieve high efficiency, our protocol is /secure with abort/ and does not achieve fairness, meaning that the adversary may receive output while the honest parties do not.

We present a number of instantiations of our compiler, and obtain protocol variants that are very efficient for both a small and large number of parties. We implemented our protocol variants and ran extensive experiments to compare them with each other. Our results show that secure computation with an honest majority can be practical, even with security in the presence of malicious adversaries. For example, we securely compute a large arithmetic circuit of depth 20 with 1,000,000 multiplication gates, in approximately 0.5 seconds with three parties, and approximately 29 seconds with 50 parties, and just under 1 minute with 90 parties.

** My Summary
This paper shows a compiler for certain type of passively secure protocols to get active security.
An important contribution of this paper is that they can use triples to check the correctness of multiplication gates, /even if the triples themselves are not correct/.
This is not trivial since a clever adversary can craft the errors in such a way that sensitive information is leaked at the time of checking the correctness of the multiplications.

The idea of their construction is to begin with a passively secure protocol for multiplications.
This is used to preprocess (potentially incorrect) triples, and also to compute (potentially incorrect) multiplication gates.
Then the triples are used to check the correctness of the multiplications.
This can be done in two ways:
- Each triple is "sacrificed" to check the correctness of the multiplication (which can be seen as using the triple to multiply and checking that the result from this matches the result the parties obtained when they computed the multiplication). This is similar to what is done in SDPZ. This involves calling the opening procedure three times (two for the multiplication using the triple and another one to check the consistency of the two results).</li>
- Apply the same idea of using one triple to perform the multiplication, but instead of opening the values one would typically open so that they becomes constants that one can multiply easily, do not open these and do the multiplication in MPC with a protocol that is only vulnerable to additive attacks.
	  After taking some appropriate linear combination, the only thing that remains is checking that some shared value is equal to zero.
	  The cool thing of this approach is that many checks can be handled together at the price of just a single check-to-zero by taking a random linear combination of them.
	  This approach is nice, but it is quite complex since you need some countermeasures to the fact that the adversary can inject additive errors.
	  For instance, the original triples coming from the protocok execution cannot be checked since there is room for a selective failure attack.
	  Instead, these triples have to be randomized and the correctness of these is checked instead.</li> TODO
  
The approach above works well for large fields, and it can be extended to small fields by iterating the check several times to lower the cheating probability.
However, for small fields the authors propose a different approach which is based on cut-and-choose, following the template from [[[lindell-1][1]]].
The main advantage with respect to that work is that in that protocol all the triples need to be correct, whereas here some of them may be incorrect and the protocol is still secure.

To illustrate some of their results, they get a protocol for which each multiplication requires each party sending 42 field elements (independent of the number of parties).
If the number of parties is small, specifically $n\lt 10$, then another method allos multiplications to be processed with each party sending $5\cdot (n-1)$ field elements.
The instantiations above use Shamir secret sharing for the base protocol.
If you use replicated SS (for three parties), the authors show that you can get multiplications with a cost of 4 field elements per party.

A natural question is if you can get comparable efficiency by preprocessing correct triples and using them to process multiplications during the online phase.
The communication complexity of this approach lies on the opening of two values.
Although protocols that follow this approach and achieve linear communication complexity are known to exist (where each party only sends a constant amount of data, independent of the number of parties), I believe that their /concrete/ efficiency does not match the one reported above.
This is discussed by the authors in the section about related work.

*** References

1) <<lindell-1>>J. Furukawa, Y. Lindell, A. Nof and O. Weinstein. High-Throughput Secure Three-Party Computation for Malicious Adversaries and an Honest Majority. In EUROCRYPT 2017, Springer (LNCS 10211), pages 225-255, 2017.
   
   

